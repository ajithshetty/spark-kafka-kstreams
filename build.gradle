buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:6.0.0"
    }
}

plugins {
    id 'java'
    id "com.github.davidmc24.gradle.plugin.avro" version "1.0.0"
}

group 'io.confluent'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()

    maven {
        url "https://packages.confluent.io/maven"
    }
}

apply plugin: "com.github.johnrengelman.shadow"

dependencies {
    implementation "org.apache.avro:avro:1.10.2"
    implementation "com.typesafe:config:1.4.2"
    implementation 'org.apache.logging.log4j:log4j-api:2.17.2'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.2'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.2'
    implementation 'org.projectlombok:lombok:1.18.28'
    //implementation 'org.apache.spark:spark-sql_2.12:3.4.0'
    //implementation 'org.apache.spark:spark-sql-kafka-0-10_2.12:3.4.0'

    implementation('org.apache.kafka:kafka-streams:2.8.0') {
        exclude group: 'org.apache.kafka', module: 'kafka-clients'
    }
    implementation('org.apache.kafka:kafka-clients:2.8.0!!')
    implementation('io.confluent:kafka-streams-avro-serde:6.1.1') {
        exclude group: 'org.apache.kafka', module: 'kafka-clients'
        exclude group: 'org.apache.kafka', module: 'kafka-streams'
    }

    testImplementation "org.apache.kafka:kafka-streams-test-utils:2.8.0"
    testImplementation "junit:junit:4.13.2"
    testImplementation 'org.hamcrest:hamcrest:2.2'
}
test {
    testLogging {
        outputs.upToDateWhen { false }
        showStandardStreams = true
        exceptionFormat = "full"
    }
}

var basePackage = 'io.confluent.developer.'
def exerciseMap = [
        transactions: basePackage + 'transactions.TransactionsSparkStreams',
        bankreadspark: basePackage + 'bankspark.BankReadSparkStreams',
        bankwritespark: basePackage + 'bankspark.BankWriteSparkStreams',
        basic    : basePackage + 'basic.BasicStreams']

task runStreams(type: Exec) {

    var streamsFullPath = ''

    if (project.hasProperty("args")) {
        var exercise = project.getProperty("args")
        streamsFullPath = exerciseMap[exercise]

        if (streamsFullPath == null) {
            throw new StopActionException("!!!!!! You entered '${exercise}' for an exercise to run, but that's not a valid entry.  The valid options are ${exerciseMap.keySet()}" )
        }
        dependsOn assemble
        group = "Execution"
        println "Using example ${streamsFullPath}"
        description = "Run a Kafka Streams exercise"
        commandLine "java", "-classpath", sourceSets.main.runtimeClasspath.getAsPath(), streamsFullPath
    }
}